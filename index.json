[{"content":" Classical Mechanics Quantum mechanics Mathematics Numerics Photonics and Electromagnetics ","permalink":"http://lorenzifrancesco.github.io/posts/","summary":" Classical Mechanics Quantum mechanics Mathematics Numerics Photonics and Electromagnetics ","title":"Posts Overview"},{"content":"","permalink":"http://lorenzifrancesco.github.io/tags/","summary":"","title":"Posts Overview"},{"content":"A very simple calculation in relativistic dynamics show an impressive aspect that differentiates the momentum change due to a force in the direction of movement of the body and the transverse ones. By using the definition of relativistic momentum $\\mathbf{p}=\\gamma m \\mathbf{v}$, we can write $$ \\frac{d\\mathbf{p}}{dt} = \\frac{d\\gamma}{dt} m \\mathbf{v} + \\gamma m \\frac{d\\mathbf{v}}{dt}, $$ by defining the longitudinal and transverse acceleration, with respect to the vector $\\mathbf{v}$ $$ \\frac{d\\mathbf{v}}{dt} = \\mathbf{a}_L +\\mathbf{a}_T, $$ it is simple to show that the first term in the first equation is only longitudinal $$ \\frac{d\\gamma}{dt} m \\mathbf{v} = \\frac{v^2}{c^2} \\gamma^3 m \\mathbf{a}_L , $$ and the second term is composed of longitudinal and transverse parts $$ \\gamma m \\frac{d\\mathbf{v}}{dt}=\\gamma m (\\mathbf{a}_L+\\mathbf{a}_T). $$ Summing the contributions, we can separate the Newton equation with respect to transverse and longitudinal forces, obtaining $$ \\frac{d\\mathbf{p}}{dt}=\\gamma^3m \\mathbf{a}_L+\\gamma m \\mathbf{a}_T. $$\n","permalink":"http://lorenzifrancesco.github.io/post/relativistic/","summary":"A very simple calculation in relativistic dynamics show an impressive aspect that differentiates the momentum change due to a force in the direction of movement of the body and the transverse ones. By using the definition of relativistic momentum $\\mathbf{p}=\\gamma m \\mathbf{v}$, we can write $$ \\frac{d\\mathbf{p}}{dt} = \\frac{d\\gamma}{dt} m \\mathbf{v} + \\gamma m \\frac{d\\mathbf{v}}{dt}, $$ by defining the longitudinal and transverse acceleration, with respect to the vector $\\mathbf{v}$ $$ \\frac{d\\mathbf{v}}{dt} = \\mathbf{a}_L +\\mathbf{a}_T, $$ it is simple to show that the first term in the first equation is only longitudinal $$ \\frac{d\\gamma}{dt} m \\mathbf{v} = \\frac{v^2}{c^2} \\gamma^3 m \\mathbf{a}_L , $$ and the second term is composed of longitudinal and transverse parts $$ \\gamma m \\frac{d\\mathbf{v}}{dt}=\\gamma m (\\mathbf{a}_L+\\mathbf{a}_T).","title":"Longitudinal and transverse relativistic dynamics"},{"content":"f(a, b, c, d) Let\u0026rsquo;s say we want to explore the behavior of f in some range of parameters.\nHow can we vectorize the function and iterate over all possible combinations? Is building a Cartesian product the best way? We expect this to be very inefficient, like $O(n^2)$ with respect to $O(n)$ inefficient in memory, at least. Let\u0026rsquo;s say the parameters have a definite number of samples (len(x) or np.shape(x) in pyhon, with x a parameter vector). We change the axis of the numpy vectors, making them multi-dimensional vectors (or, respecting the notion of dimension in algebra, multi-axial):\na_vec = a[:, None, None, None] Therefore the samples on each axis will be\n(10, 1, 1, 1) (1, 2, 1, 1) (1, 1, 4, 1) (1, 1, 1, 8) By calling the function foo(a_vec, b_vec, c_vec, d_vec), we get a\nres = foo(a_vec, b_vec, c_vec, d_vec) and\nnp.shape(res) will give (10, 2, 4, 8). The vectorization is crucially dependent on the number of items in each axis of the multi-axis vectors. For example, we expect that only two values are allowed in a column: 1 or a fixed N\n(..., 1, ...) (..., 1, ...) (..., N, ...) (..., 1, ...) (..., N, ...) The vectorization routine is therefore allowed to broadcast.\nExample script import numpy as np def f(x, y, z): return x+y+z print(\u0026#34;\\nCheck the normal operation\u0026#34;) a = np.random.randint(0, 100, (20, 10, 1)) b = np.random.randint(0, 100, (32)) c = np.random.randint(0, 100, (20, 1, 32)) print(\u0026#34;a : \u0026#34;, np.shape(a)) print(\u0026#34;b : \u0026#34;, np.shape(b[None, None, :])) print(\u0026#34;c : \u0026#34;, np.shape(c)) res = f(a, b[None, None, :], c) print(\u0026#34;res : \u0026#34;, np.shape(res)) print(\u0026#34;\\nNow we generate a vectorization (broadcasting) error\u0026#34;) b = np.random.randint(0, 100, (31)) res = f(a, b[None, None, :], c) ","permalink":"http://lorenzifrancesco.github.io/post/numerics/simple_vectorization/","summary":"f(a, b, c, d) Let\u0026rsquo;s say we want to explore the behavior of f in some range of parameters.\nHow can we vectorize the function and iterate over all possible combinations? Is building a Cartesian product the best way? We expect this to be very inefficient, like $O(n^2)$ with respect to $O(n)$ inefficient in memory, at least. Let\u0026rsquo;s say the parameters have a definite number of samples (len(x) or np.shape(x) in pyhon, with x a parameter vector).","title":"Simple (but nontrivial) vectorization in Numpy"},{"content":"In this short post, we analyze the computation of a two-variable function on a grid, that is a common task for exploring physical properties of systems through phase diagrams, and similar\nusing Distributed, Printf @info @sprintf(\u0026#34;Number of workers: %d\u0026#34;, nprocs()) @everywhere function loop_compute(x) for i in 1:100000000 x += sin(x) end return x end t0 = @elapsed loop_compute(1.0) @info @sprintf(\u0026#34;Single eval time [s]: %4.3e\u0026#34;, t0) mat = rand(10, 10) t_pmap = @elapsed pmap(loop_compute, mat) @info @sprintf(\u0026#34;pmap eval time [s] : %4.3e\u0026#34;, t_pmap) t_sing = @elapsed loop_compute.(mat) @info @sprintf(\u0026#34;serial eval time [s] : %4.3e\u0026#34;, t_sing) @info @sprintf(\u0026#34;Speeup ratio: %4444\u0026#34;, t_sing/t_pmap) Try to run this simple script using\njulia -p 4 script.jl And check the speedup of the parallelized code. Keep also an eye on memory allocation.\n","permalink":"http://lorenzifrancesco.github.io/post/numerics/simple_multiprocessing/","summary":"In this short post, we analyze the computation of a two-variable function on a grid, that is a common task for exploring physical properties of systems through phase diagrams, and similar\nusing Distributed, Printf @info @sprintf(\u0026#34;Number of workers: %d\u0026#34;, nprocs()) @everywhere function loop_compute(x) for i in 1:100000000 x += sin(x) end return x end t0 = @elapsed loop_compute(1.0) @info @sprintf(\u0026#34;Single eval time [s]: %4.3e\u0026#34;, t0) mat = rand(10, 10) t_pmap = @elapsed pmap(loop_compute, mat) @info @sprintf(\u0026#34;pmap eval time [s] : %4.","title":"Simple Multiprocessing in Julia"},{"content":"This post is designed to be updated as soon as new tricks come handy.\nUseful commands Instruction Command Change user su - \u0026lt;username\u0026gt; Change owner chown user:group -R folder Check owner \u0026amp; permissions stat filename List all users with UID cut -d: -f1,3 /etc/passwd List all groups with GID getent group Linux ownership system rwx Owner and permissions: typing la we get informations about the pemissions about a file or a folder\nexample -rw-r--r-- 1 lorenzi lorenzi 4,3K 19 gen 11.22 .bashrc drwxr-xr-x 26 lorenzi lorenzi 4,0K 8 feb 14.01 bench/ the first column is divided in three parts:\nOwner of the file (U) User group of the owner (G) all others (O) rw- r-- r-- the first character indicates the file type, that for example in the bench case is a directory.\nOctal characters A mapping can be done from the three permissions to a single octal value. This mapping is one-to-one.\nr (read): 4 w (write): 2 x (execute): 1\n","permalink":"http://lorenzifrancesco.github.io/post/numerics/linux-admin-tools/","summary":"This post is designed to be updated as soon as new tricks come handy.\nUseful commands Instruction Command Change user su - \u0026lt;username\u0026gt; Change owner chown user:group -R folder Check owner \u0026amp; permissions stat filename List all users with UID cut -d: -f1,3 /etc/passwd List all groups with GID getent group Linux ownership system rwx Owner and permissions: typing la we get informations about the pemissions about a file or a folder","title":"Linux Admin Tools"},{"content":"Desired topology and active services SLURM super quick start guide The guide is available here.\nOn Centos8Stream, we first install MUNGE, then install SLURM by the bzip package. Status of munge can be probed by\nmunge -n | unmunge Installing the SLURM package is done manually\nwget https://download.schedmd.com/slurm/slurm-23.11.3.tar.bz2 We then unzip, configure, and build SLURM\nWe then need to create, by the SLURM user \u0026ldquo;slurm\u0026rdquo;, the directories of\nlog files PID files State save and make them writable. We take inspiration from an existing slurm.conf file. So the directories will be\nFunction Directory PID files \u0026mdash; SlurmdSpoolDir /var/spool/slurmd StateSaveLocation /var/spool/slurmctld Beware, slurm is not in the sudoers group (and it must not be!). If the directories are already there, we must chown them, and chmod them to writable by slurm. This can be done only by a sudoer.\nIn order to use the SLURM API, we must link to the libraries\nldconfig -n \u0026lt;library-location\u0026gt; in our case \u0026lt;library-location\u0026gt; is in the downloaded (and built) package.\nA handy alternative: RPM We can use rpmbuild to directly install and configure the directories and link the libraries. We do it in the slurm user.\nThis method show a missing dependency\nerror: Failed build dependencies: mariadb-devel \u0026gt;= 5.0.0 is needed by slurm-23.11.3-1.el8.x86_64 that we can easily solve by\nsudo yum install mariadb-devel A warning in the rpmbuild suggest to run libtool --finish /lib64/security. We do it, installing libtool first\nWe still have the problem that the commands are not available. The SLURM services are not available.\nThe RPM files are loacated into\n~/rpmbuild/RPMS so we need to run\nrpm -i *.rpm inside the rpms folder.\nslurm.conf We use the generator tool to make the slurm.conf file\nWe can now enable the daemons\nsystemctl enable slurmctld systemctl enable slurmdbd systemctl enable slurmd and activate them\nsystemctl start slurmctld systemctl start slurmdbd systemctl start slurmd The order is important!\nWe have a problem in starting the slurmdbd service: Condition: start condition failed at Sun 2024-02-11 17:10:08 CET; 8min ago └─ ConditionPathExists=/etc/slurm/slurmdbd.conf was not met This is due to slurmdbd: error: s_p_parse_file: unable to read \u0026quot;/etc/slurm/slurmdbd.conf\u0026quot;: Permission denied\nAlso, we got error\nFeb 11 17:26:11 slurph.novalocal slurmdbd[7414]: slurmdbd: error: mysql_real_connect failed: 2002 Can\u0026#39;t connect to local MySQL server through socket \u0026#39;/var/lib/mys\u0026gt; Seems like we have problems with the installation of MariaDB. Lets run\nsudo dnf install mariadb-server Finally we are able to start the service\nsystemctl start mariadb.service Who is running SLURM? Running\nslurmdbd -Dvvv We get errors like\nslurmdbd.conf owned by 1000 not SlurmUser(1003) Seems like we have problems in read from /var/run/\u0026lt;PID files\u0026gt; One can generate a folder inside /var/run and chown it, but since /var/run is tmpfs it will go after a system reboot. The solution seems to be to run a mkdir + chown script at startup. This is to be implemented. The script looks like (/home/centos/startup_pid.sh)\n#! /bin/bash mkdir /var/run/slurm chown slurm /var/run/slurm Still we have problems in connecting to the database. This is a problem also on the startup of slurmd.service. Obviously, we lack a DB configuration.\nDatabase configuration We follow commands from the previous link.\nUnable to determine this slurmd\u0026rsquo;s nodename This problem is related to the impossibility to detect runner01. Before running the slurmd daemon, we need to setup the computing nodes. Now our slurmctld and slurmdbd are running.\nConfiguraiton of the computing node(s) Follow instruction from youtube. After the configuration, and running the slurmd on runner01, the slurmctld.log file on the slurPh machine indicates a problem with\n[2024-02-12T17:57:04.216] error: Node runner01 appears to have a different slurm.conf than the slurmctld. This could cause issues with communication and functionality. Please review both files and make sure they are the same. If this is expected ignore, and set DebugFlags=NO_CONF_HASH in your slurm.conf. and most importantly, an authentication problem by Munge\n[2024-02-12T17:57:18.718] error: Munge decode failed: Unauthorized credential for client UID=1003 GID=1003 We should check\nmunge -n | unmunge Both machines return a success code.\nrunner01:\nSTATUS: Success (0) ENCODE_HOST: runner01.novalocal (10.64.37.114) ENCODE_TIME: 2024-02-12 18:02:47 +0100 (1707757367) DECODE_TIME: 2024-02-12 18:02:47 +0100 (1707757367) TTL: 300 CIPHER: aes128 (4) MAC: sha256 (5) ZIP: none (0) UID: centos (1000) GID: centos (1000) LENGTH: 0 slurPh:\nSTATUS: Success (0) ENCODE_HOST: runner01.novalocal (10.64.37.114) ENCODE_TIME: 2024-02-12 18:02:47 +0100 (1707757367) DECODE_TIME: 2024-02-12 18:02:47 +0100 (1707757367) TTL: 300 CIPHER: aes128 (4) MAC: sha256 (5) ZIP: none (0) UID: centos (1000) GID: centos (1000) LENGTH: 0 The problem seems to be that UID and GID are not the same in the two machines runner01:\nFile: /etc/slurm Size: 4096 Blocks: 8 IO Block: 4096 directory Device: fc01h/64513d\tInode: 30103776 Links: 2 Access: (0777/drwxrwxrwx) Uid: ( 1001/ slurm) Gid: ( 1001/ slurm) slurPh:\nFile: /etc/slurm Size: 4096 Blocks: 8 IO Block: 4096 directory Device: fc01h/64513d\tInode: 25439750 Links: 2 Access: (0755/drwxr-xr-x) Uid: ( 1003/ slurm) Gid: ( 1003/ slurm) the id munge command returns, strangely:\nrunner01:\nuid=991(munge) gid=988(munge) groups=988(munge) slurPh:\nuid=991(munge) gid=988(munge) groups=988(munge) We need to set the right UID, and change the permissions to /etc/munge/munge.key on both machines. We run groupmod -g 1099 munge, and usermod -u 1004 -g 1099 munge. In order not to have conflicts with other users, we list all users by cut -d: -f1,3 /etc/passwd. To list all groups with GID: getent group. With the changed users, the munge daemon fails to start. In the log file, we also notice\n2024-02-12 17:57:18 +0100 Info: Unauthorized credential for client UID=1003 GID=1003 previous attempts by slurm user on runner01 (?) to authenticate. The change of user created ownership issues on log files and on the PRNG generator folder. We fix it by\nsudo chown munge:munge -R /etc/munge sudo chown munge:munge -R /var/lib/munge sudo chown munge:munge -R /var/log/munge Ok, we still have unable to determine this node name. scontrol ping on runner01 still gives\nSlurmctld(primary) at slurph is DOWN There is more: every execution of the ping on runner01 triggers the writing of\n2024-02-12 18:34:26 +0100 Info: Unauthorized credential for client UID=1003 GID=1003 in /var/log/munge/munged.log! Error bursts of the corresponding event in /var/log/slurm/slurmctld.log are like\n[2024-02-12T18:44:00.281] error: Munge decode failed: Unauthorized credential for client UID=1003 GID=1003 [2024-02-12T18:44:00.281] auth/munge: _print_cred: ENCODED: Thu Jan 01 01:00:00 1970 [2024-02-12T18:44:00.281] auth/munge: _print_cred: DECODED: Thu Jan 01 01:00:00 1970 [2024-02-12T18:44:00.281] error: slurm_unpack_received_msg: [[runner01]:50994] auth_g_verify: REQUEST_PING has authentication error: Unspecified error [2024-02-12T18:44:00.281] error: slurm_unpack_received_msg: [[runner01]:50994] Protocol authentication error [2024-02-12T18:44:00.291] error: slurm_receive_msg [10.64.37.114:50994]: Protocol authentication error Note that unauhtorized credential is very different from invalid credentials!\nChange to Ubuntu OS Due to the dubious status of CentOS in relationship to RHEL, we switch to Ubuntu. This would allow a clean installation of SLURM to be seamless.\nConnection aliases commands to the new instances are, in fish:\nalias runner01=\u0026#34;ssh -L2082:10.64.37.221:22 florenzi@gate.cloudveneto.it\u0026#34; alias slurPh=\u0026#34;ssh -L2081:10.64.37.17:22 florenzi@gate.cloudveneto.it\u0026#34; alias connect-slurPh=\u0026#34;ssh -p 2081 -i ~/.ssh/certificates/slurPh-key.pem ubuntu@localhost\u0026#34; alias connect-runner01=\u0026#34;ssh -p 2082 -i ~/.ssh/certificates/slurPh-key.pem ubuntu@localhost\u0026#34; slurmdbd.conf We need to insert here the credentials to the MySQL database. MySQL database is to be managed via SLURM using sacct. For example, for adding a new user, we have\nsacctmgr create user name=\u0026lt;USERNAME\u0026gt; account=\u0026lt;GROUP\u0026gt; CGroups When launching a job, we immediately set the node state to drain, and the log file show\n[2024-02-20T16:06:16.263] error: slurmd error running JobId=50 on node(s)=runner01: Plugin initialization failed This is an error related to the Cgroups plugin. On the runner, we have in /var/log/slurmd.log\n[2024-02-20T16:06:16.269] [50.batch] error: unable to mount memory cgroup namespace: Device or resource busy [2024-02-20T16:06:16.269] [50.batch] error: unable to create memory cgroup namespace [2024-02-20T16:06:16.269] [50.batch] error: Couldn\u0026#39;t load specified plugin name for jobacct_gather/cgroup: Plugin init() callback failed [2024-02-20T16:06:16.269] [50.batch] error: cannot create jobacct_gather context for jobacct_gather/cgroup [2024-02-20T16:06:16.273] [50.batch] error: unable to mount cpuset cgroup namespace: Device or resource busy [2024-02-20T16:06:16.273] [50.batch] error: unable to create cpuset cgroup namespace [2024-02-20T16:06:16.273] [50.batch] error: unable to mount memory cgroup namespace: Device or resource busy [2024-02-20T16:06:16.273] [50.batch] error: unable to create memory cgroup namespace [2024-02-20T16:06:16.273] [50.batch] error: failure enabling memory enforcement: Unspecified error [2024-02-20T16:06:16.273] [50.batch] error: Couldn\u0026#39;t load specified plugin name for task/cgroup: Plugin init() callback failed [2024-02-20T16:06:16.273] [50.batch] error: cannot create task context for task/cgroup [2024-02-20T16:06:16.273] [50.batch] error: job_manager: exiting abnormally: Plugin initialization failed [2024-02-20T16:06:16.273] [50.batch] sending REQUEST_COMPLETE_BATCH_SCRIPT, error:1011 status:0 [2024-02-20T16:06:16.275] [50.batch] done with job Useful resources for SLURM management SLURM cheatsheet SLURM config file generator SLURM official debug guide Other installation guides @DISI_computational_pharmacology @niflheim Slides Utah uni ","permalink":"http://lorenzifrancesco.github.io/post/numerics/slurm/","summary":"Desired topology and active services SLURM super quick start guide The guide is available here.\nOn Centos8Stream, we first install MUNGE, then install SLURM by the bzip package. Status of munge can be probed by\nmunge -n | unmunge Installing the SLURM package is done manually\nwget https://download.schedmd.com/slurm/slurm-23.11.3.tar.bz2 We then unzip, configure, and build SLURM\nWe then need to create, by the SLURM user \u0026ldquo;slurm\u0026rdquo;, the directories of\nlog files PID files State save and make them writable.","title":"A clean installation of SLURM scheduler"},{"content":"The Kapitza pendulum is a model in classical mechanics that exhibits counterintuitive behaviour. It is a pendulum with a pivot point that oscillates vertically.\nIf $\\phi$ is the angle the pendulum have with respect to the vertical downward position, for some values of the driving frequency and amplitude, it can be stable in the inverted position $\\phi = \\pi$, and unstable in the upright position $\\phi = 0$.\nThis is the opposite of what happens for a normal pendulum, which has always a stable equilibrium point with $\\phi=0$ and unstable one with $\\phi=\\pi$.\nThe equation of motion in the moving frame contains a fictitious force term $$ mL\\ddot{\\phi} = mg\\sin\\phi - Am\\omega^2 \\cos(\\omega t) \\sin \\phi $$ that in our case is equivalent to $$ \\ddot{\\phi} = -\\frac{1}{L}(g+A\\omega^2\\cos(\\omega t))\\sin \\phi $$ Let us consider the dynamic variable as composed of a fast and a slow part $$ \\phi = \\phi_0 + \\tilde{\\phi} $$ Linearizing, the equation of motion of $\\tilde{\\phi}$ is $$ \\ddot{\\tilde{\\phi}} = -\\frac{1}{L}(g+A\\omega^2\\cos(\\omega t))\\sin\\phi_0 \\tilde{\\phi} $$ that is a Mathieu equation. [to be continued\u0026hellip;]\n","permalink":"http://lorenzifrancesco.github.io/post/classical/kapitza/","summary":"The Kapitza pendulum is a model in classical mechanics that exhibits counterintuitive behaviour. It is a pendulum with a pivot point that oscillates vertically.\nIf $\\phi$ is the angle the pendulum have with respect to the vertical downward position, for some values of the driving frequency and amplitude, it can be stable in the inverted position $\\phi = \\pi$, and unstable in the upright position $\\phi = 0$.\nThis is the opposite of what happens for a normal pendulum, which has always a stable equilibrium point with $\\phi=0$ and unstable one with $\\phi=\\pi$.","title":"The Kapitza pendulum"},{"content":"Piece of LCD screen with pigments Who can guess this? Hover over the picture to see Section of an Intel (1975!) memory chip ","permalink":"http://lorenzifrancesco.github.io/lab/w2/","summary":"Piece of LCD screen with pigments Who can guess this? Hover over the picture to see Section of an Intel (1975!) memory chip ","title":"Some microscopies"},{"content":"A very interesting piece for RF measurements! :)\n","permalink":"http://lorenzifrancesco.github.io/lab/w1/","summary":"A very interesting piece for RF measurements! :)","title":"What is this?"},{"content":"Evergreen Lissajous patterns.\nAlso Lincoln Labs like them!\n","permalink":"http://lorenzifrancesco.github.io/lab/w3/","summary":"Evergreen Lissajous patterns.\nAlso Lincoln Labs like them!","title":"X-Y"},{"content":" Introduzione alla Cibernetica, N. Wiener, Bollati Boringhieri (2012) Vortici e Colori - alle origini dell\u0026rsquo;opera di James Clerk Maxwell, G. Peruzzi, Dedalo (2010) ","permalink":"http://lorenzifrancesco.github.io/readings/essays/","summary":" Introduzione alla Cibernetica, N. Wiener, Bollati Boringhieri (2012) Vortici e Colori - alle origini dell\u0026rsquo;opera di James Clerk Maxwell, G. Peruzzi, Dedalo (2010) ","title":"Essays"},{"content":"Here I collect some interesting bibliography in physics, that I have read or I am reading in this moment.\nPhotonics and Electromagnetics A book with which I am in love and have followed me for many years is\nElectromagnetic Waves, C. G. Someda, CRC Press (2006) Quantum optics and noise Quantum noise - a Handbook of Markovian and Non-Markovian methods with Applications to Quantum Optics, C. W. Gardiner and P. Zoller, Springer (1999) Elements of Quantum Optics, P. Meystre and M. Sargent III, Springer (2007) Optical Coherence and Quantum Optics, L. Mandel and E. Wolf, Cambridge University Press (1995) Condensed Matter Physics Many-particle Physics, G. Mahan, Kluwer Academic (1990) Essays Introduzione alla Cibernetica, N. Wiener, Bollati Boringhieri (2012) Vortici e Colori - alle origini dell\u0026rsquo;opera di James Clerk Maxwell, G. Peruzzi, Dedalo (2010) Considerazioni semiserie Fare ricerca è come giocare a Cluedo: devi capire chi ha fatto cosa, quando, ed usando che metodo. ","permalink":"http://lorenzifrancesco.github.io/other/interesting_bibliography/","summary":"Here I collect some interesting bibliography in physics, that I have read or I am reading in this moment.\nPhotonics and Electromagnetics A book with which I am in love and have followed me for many years is\nElectromagnetic Waves, C. G. Someda, CRC Press (2006) Quantum optics and noise Quantum noise - a Handbook of Markovian and Non-Markovian methods with Applications to Quantum Optics, C. W. Gardiner and P. Zoller, Springer (1999) Elements of Quantum Optics, P.","title":"Some interesting bibliography in physics"},{"content":"Here I collect some interesting bibliography in physics, that I have read or I am reading in this moment.\nPhotonics and Electromagnetics A book with which I am in love and have followed me for many years is\nElectromagnetic Waves, C. G. Someda, CRC Press (2006) Quantum optics and noise Quantum noise - a Handbook of Markovian and Non-Markovian methods with Applications to Quantum Optics, C. W. Gardiner and P. Zoller, Springer (1999) Elements of Quantum Optics, P. Meystre and M. Sargent III, Springer (2007) Optical Coherence and Quantum Optics, L. Mandel and E. Wolf, Cambridge University Press (1995) Condensed Matter Physics Many-particle Physics, G. Mahan, Kluwer Academic (1990) ","permalink":"http://lorenzifrancesco.github.io/readings/physics/","summary":"Here I collect some interesting bibliography in physics, that I have read or I am reading in this moment.\nPhotonics and Electromagnetics A book with which I am in love and have followed me for many years is\nElectromagnetic Waves, C. G. Someda, CRC Press (2006) Quantum optics and noise Quantum noise - a Handbook of Markovian and Non-Markovian methods with Applications to Quantum Optics, C. W. Gardiner and P. Zoller, Springer (1999) Elements of Quantum Optics, P.","title":"Some interesting bibliography in physics"},{"content":"This is a classical calculation in Poisson processes, indicating how to obtain a binomial variable from two Poisson processes.\nLet $X_1(t) \\sim \\mathcal{P}(\\lambda_1 t)$ and $X_2(t) \\sim \\mathcal{P}(\\lambda_2 t)$ be two independent Poisson processes, with parameters $\\lambda_1$ and $\\lambda_2$ respectively, that can be interpreted as arrivals in a second. Let us consider the following conditional $$ \\begin{align} \u0026amp; P[X_1(t)=k \\ | \\ X_1(t)+X_2(t) \u0026amp;= n+k] \\end{align} $$ that is the probability that there are $k$ arrivals from the variable 1, conditioned on the number of total arrivals being $n+k$. $$ \\begin{align} \u0026amp; P[X_1(t)=k \\ | \\ X_1(t)+X_2(t) \u0026amp;= n+k] = \\\\ \u0026amp;= \\frac{P[X_1(t)=k, X_2(t)= n]}{P[X_1(t) + X_2(t)= n+k]} \\\\ \u0026amp;=\\frac{(\\lambda_1 t)^k (k!)^{-1} e^{-\\lambda_1 t} (\\lambda_2 t)^n (n!)^{-1} e^{-\\lambda_2 t}}{((\\lambda_1 + \\lambda_2) t)^{n+k} ((n+k)!)^{-1} e^{-(\\lambda_1+\\lambda_2) t}} \\\\ \u0026amp;= \\frac{(n+k)!}{n! k!}\\frac{\\lambda_1^k \\lambda_2^n}{((\\lambda_1 + \\lambda_2))^{n+k}} \\\\ \u0026amp;= \\binom{n+k}{k} \\left(\\frac{\\lambda_1}{\\lambda_1+\\lambda_2}\\right)^k \\left(\\frac{\\lambda_2}{\\lambda_1+\\lambda_2}\\right)^n. \\end{align} $$ Here we found that this probability distribution coincides to the one of a binomial variable $$ Y \\sim \\text{Bin}(n+k, p) $$ where $$ p = \\frac{\\lambda_1}{\\lambda_1+ \\lambda_2} $$ This result is well rooted in our intuition: every arrival comes from process 1 or process 2, with a probability which is proportional to the arrival rate of the two processes. Expressing this results with the rates $\\lambda_i$, we obtain a sum of Bernoulli variables, that boils down to the binomial variable we found.\n","permalink":"http://lorenzifrancesco.github.io/post/mathematics/poisson/","summary":"This is a classical calculation in Poisson processes, indicating how to obtain a binomial variable from two Poisson processes.\nLet $X_1(t) \\sim \\mathcal{P}(\\lambda_1 t)$ and $X_2(t) \\sim \\mathcal{P}(\\lambda_2 t)$ be two independent Poisson processes, with parameters $\\lambda_1$ and $\\lambda_2$ respectively, that can be interpreted as arrivals in a second. Let us consider the following conditional $$ \\begin{align} \u0026amp; P[X_1(t)=k \\ | \\ X_1(t)+X_2(t) \u0026amp;= n+k] \\end{align} $$ that is the probability that there are $k$ arrivals from the variable 1, conditioned on the number of total arrivals being $n+k$.","title":"Binomial from Poisson in composite process"},{"content":"The procedure of quantization of a classical theory has its crucial passage in the promotion of the dynamical variables to operators in the Hilbert space of the quantum states of the system. The quantization is successful if these operators form a complete set of commuting observables (this set is called ICOC). In this case, every quantum state of the system can be expressed as a sum of eigenstates, and we can write the probability amplitudes, and take the averages of all the dynamical variables. The quantized description of the electromagnetic field in the vacuum is obtained by expressing the field hamiltonian in a finite volume $V$, and then taking the limit for $V \\to \\infty$. The promotion to operators is performed by the position and conjugate momentum operators, which are introduced by writing the field hamiltonian in terms of a sum, possibly infinite, of uncoupled harmonic oscillators. We start by expressing the hamiltonian of the field in a volume of space $V$. $$ H = \\int_{V}dV \\dfrac{1}{2}\\varepsilon_0 |\\mathbf{E}|^2 + \\dfrac{1}{2\\mu_0}|\\mathbf{B}|^2. $$ Now we remember that it is possible to express the fields $\\mathbf{E}$, $\\mathbf{B}$ using the magnetic vector potential $\\mathbf{A}$ in this way, choosing the Coulomb gauge: $$ \\begin{align} \\mathbf{E} \u0026amp;= - \\dfrac{\\partial}{\\partial t}\t\\mathbf{A} \\\\ \\mathbf{B} \u0026amp;= \\nabla \\times \\mathbf{A}. \\end{align} $$ We recall that, from the Maxwell equations, the wave equation for the field $\\mathbf{A}$ $$ \\left(\\nabla^2 - \\dfrac{1}{c^2} \\dfrac{\\partial^2}{\\partial t^2} \\right)\\mathbf{A} =0. $$ Since we are in a limited volume of space, we can impose a periodic boundary condition, and express the field $\\mathbf{A}$ according to its Fourier series, by summing complex exponentials. We choose to express the component plane waves as linearly polarized waves. This does not affect the generality of the procedure, as other polarizations can be expressed as sums of linearly polarized waves, with appropriate phase shifts. Let therefore $\\mathbf{k}$ be the wave vector, and $s$ the linear polarization ($s \\in {\\alpha, \\beta}$ where $\\alpha, \\beta$ are two possible orthogonal polarizations given the wave vector $\\mathbf{k}$). We have that\n$$ \\mathbf{A} = \\sum_{\\mathbf{k}s} A_{\\mathbf{k}s}(t) e^{i \\mathbf{k} \\cdot \\mathbf{r}} , \\hat{\\epsilon}{\\mathbf{k}s}, $$ where $\\hat{\\epsilon}{\\mathbf{k}s}$ is the unit vector of the field, parallel to the polarization. Furthermore the field $\\mathbf{A}$ must be real, so we have the condition\n$$ A_{-\\mathbf{k}s}(t) = A_{\\mathbf{k}s}^*(t). $$ By imposing this condition, unless we redefine the terms $A_{\\mathbf{k}s}$ by halving them, we can rewrite the sum as\n$$ \\mathbf{A} = \\sum _{\\mathbf{k}s} A _{\\mathbf{k}s}(t) e^{i \\mathbf{k} \\cdot \\mathbf{r}} + A^* _{\\mathbf{k}s}(t) e^{-i \\mathbf{k} \\cdot \\mathbf{r}} \\hat{\\epsilon} _{\\mathbf{k}s}. $$\nSubstituting the following condition\n$$ \\ddot{A} _{\\mathbf{k}s}(t) + \\omega _\\mathbf{k}^2 A _{\\mathbf{k}s}(t) = 0, $$\nwith the dispersion relation\n$$ \\omega_\\mathbf{k} = c |\\mathbf{k}|. $$ Since $\\omega$, in the vacuum, depends only on the modulus $|\\mathbf{k}| =: k$ we can also write $\\omega_k$ for simplicity. So the equation is solved as\n$$ A_{\\mathbf{k}s}(t) = A_{\\mathbf{k}s}(0) e^{-\\omega_k t}. $$\nWe now computer the Hamiltonian in terms of this Fourier expansion of the fields\n$$ H = \\int_{V}dV \\dfrac{1}{2}\\varepsilon_0 |\\dfrac{\\partial}{\\partial t} \\mathbf{A}|^2 + \\dfrac{1}{2\\mu_0}|\\nabla \\times \\mathbf{A}|^2. $$ In this way we obtain\n$$ H = \\sum_{\\mathbf{k}s} \\varepsilon_0 \\omega_k^2 ( A_{\\mathbf{k}s}(t) A_{\\mathbf{k}s}^* (t) + A_{\\mathbf{k}s}^{} (t) A_{\\mathbf{k}s}(t)) , $$ we notice that this Hamiltonian is independent of time, since the terms $A_{\\mathbf{k}s}(t)A_{\\mathbf{k}s}^ (t)$ and the complex conjugate are. For brevity we can simply write $A_{\\mathbf{k}s} A_{\\mathbf{k}s}^* $. We introduce the adimensional variables $a_{\\mathbf{k}s}$, and $a_{\\mathbf{k}s}^*$ in such a way that\n$$ \\begin{align} A_{\\mathbf{k}s} \u0026amp;= \\sqrt{\\dfrac{\\hslash}{2\\epsilon_0 \\omega_k}} a_{\\mathbf{k}s} \\\\ A_{\\mathbf{k}s}^* \u0026amp;= \\sqrt{\\dfrac{\\hslash}{2\\epsilon_0 \\omega_k}} a_{\\mathbf{k}s}^*. \\end{align} $$\nTherefore\n$$ H = \\sum_{\\mathbf{k}s} \\dfrac{\\hslash \\omega_k}{2} (a_{\\mathbf{k}s}a_{\\mathbf{k}s}^* +a_{\\mathbf{k}s}a_{\\mathbf{k}s}^*). $$\nWe can introduce other variables\n$$ \\begin{align} q_{\\mathbf{k}s} \u0026amp;= \\sqrt{\\dfrac{2\\hslash}{\\omega_k}} (a_{\\mathbf{k}s} + a_{\\mathbf{k}s}^* )\\\\ p_{\\mathbf{k}s} \u0026amp;= \\sqrt{2\\hslash \\omega_k} (a_{\\mathbf{k}s} - a_{\\mathbf{k}s}^* ), \\end{align} $$ so we can express the Hamiltonian in terms of $q_{\\mathbf{k}s}$ and $p_{\\mathbf{k}s}$, obtaining the following, important expression\n$$ H = \\sum_{\\mathbf{k}s} \\dfrac{p_{\\mathbf{k}s}^2}{2} + \\omega_k^2 \\dfrac{q_{\\mathbf{k}s}^2}{2}. $$ By observing that this Hamiltonian is exactly that of a sum of an infinite number of harmonic oscillators, one for each mode of the electromagnetic field. We are finally at the point where we can promote the variables to operators. This is an operation possible when we establish the commutation relations between the dynamical variables. In this case we assume the fundamental commutation relations\n$$ [ \\hat{q} _{n} , \\hat{p} _m ] = \\delta _{nm}, $$\nthat is\n$$ \\hat{q} _n \\hat{p} _m - \\hat{p} _m \\hat{q} _n = i\\hslash \\delta _{nm}, $$\nsince $$ i\\hslash [\\hat{A}, \\hat{B}] = \\hat{A}\\hat{B}-\\hat{B}\\hat{A}. $$ By means of the promotion operation $$ \\begin{align} q _{\\mathbf{k}s} \\to \\hat{q} _{\\mathbf{k}s} \\\\ p _{\\mathbf{k}s} \\to \\hat{p} _{\\mathbf{k}s} , \\end{align} $$ we can write a quantum Hamiltonian\n$$ \\hat{H} = \\sum _{\\mathbf{k}s} \\dfrac{\\hat{p} _{\\mathbf{k}s}^2}{2} + \\omega _k^2 \\dfrac{\\hat{q} _{\\mathbf{k}s}^2}{2}. $$ We notice that it is an observable, since it is a sum of observables (we can say that this is a Hermitian operator). We can then apply the standard procedure for the quantization of the harmonic oscillator, introducing the creation and annihilation operators\n$$ \\begin{align} \\hat{a} _{\\mathbf{k}s} \u0026amp;= \\sqrt{\\dfrac{\\omega _k}{2\\hslash}} \\left(\\hat{q} _{\\mathbf{k}s} + \\dfrac{i}{\\omega _k}\\hat{p} _{\\mathbf{k}s}\\right)\\\\ \\hat{a} _{\\mathbf{k}s}^{\\dagger} \u0026amp;= \\sqrt{\\dfrac{\\omega _k}{2\\hslash}} \\left(\\hat{q} _{\\mathbf{k}s} - \\dfrac{i}{\\omega _k}\\hat{p} _{\\mathbf{k}s}\\right) , \\end{align} $$ that satisfy the commutation relations\n$$ [\\hat{a} _{\\mathbf{k}s}, \\hat{a} _{\\mathbf{k}\u0026rsquo;s\u0026rsquo;}^\\dagger] = \\delta _{\\mathbf{k}, \\mathbf{k}\u0026rsquo;} \\delta _{s, s\u0026rsquo;}, $$ we therefore obtain\n$$ \\hat{H} = \\sum _{\\mathbf{k}s} \\hslash \\omega_k \\left(\\hat{a} _{\\mathbf{k}s}^\\dagger \\hat{a} _{\\mathbf{k}s} + \\dfrac{1}{2}\\right). $$\nThe Hilbert space of the quantum states of the system is called Fock space. The second quantization procedure of the electromagnetic field is an example of a typical calculation of quantum field theory. This physical theory allows us to find quantum expressions for fields, be they electromagnetic, or even fields of matter.\n","permalink":"http://lorenzifrancesco.github.io/post/quantum/second_quantization/","summary":"The procedure of quantization of a classical theory has its crucial passage in the promotion of the dynamical variables to operators in the Hilbert space of the quantum states of the system. The quantization is successful if these operators form a complete set of commuting observables (this set is called ICOC). In this case, every quantum state of the system can be expressed as a sum of eigenstates, and we can write the probability amplitudes, and take the averages of all the dynamical variables.","title":"Second quantization of the electromagnetic field"},{"content":"Nonlinear Schrödinger equations appears in numerous physical setups, like nonlinear optics, condensed matter physics and plasma physics. In all of these scenarios, it describes the dynamics of wave envelopes in the presence of dispersion and weak nonlinearity. A natural question is to understand if it is possible to write the equation regardless of the physical details, starting from a purely mathematical assumptions on the evolution of the fields. This is illuminating from the mathematical point of view, besides being an useful exercise.\nIn this post we explore a method to derive the NLSE in general, starting from a generic partial differential equation and assuming properties of the evolution operator.\nLet us condiser a partial differential equation in $d$ dimensions for a scalar field $u$, $$ L(\\partial_t, \\nabla)u = G(u), $$ where $L$ is a linear operator, and $G$ a generic (nonlinear) function of $u$ and its derivatives. For low-amplitude solutions, the nonlienar term can be neglected, so solutions are $$ u = \\epsilon\\psi \\exp[i(\\mathbf{k} \\cdot \\mathbf{r} - \\omega t)], $$ with $\\omega$ and $\\mathbf{k}$ linked by the dispersion relation $$ L(-i\\omega, i\\mathbf{k}) = 0. $$ in general, this relation admits a number of solutions $\\omega$ given a fixed $\\mathbf{k}$. Let $\\omega(\\mathbf{k})$ be one of those solutions. Considering the solution in Eq. (\\ref{solution}), the dispersion relation can be written as $$ [i\\partial_t - \\omega(i\\partial_{\\mathbf{r}})] \\ \\epsilon\\psi\\exp[i(\\mathbf{k} \\cdot \\mathbf{r} - \\omega t)], $$ by promoting $\\omega$ to an operator. We now introduce a correction: for small nonlinearity, the angular frequency will depend on $\\epsilon^2 |\\psi|^2$. Therefore we substitute $\\omega(\\mathbf{k})$ with $\\Omega(\\mathbf{k}, \\epsilon^2|\\psi|^2)$. Notice that $\\Omega(\\mathbf{k}, 0)=\\omega(\\mathbf{k})$. Moreover, the amplitude $\\psi$ becomes dependent on the slow variables $T=\\epsilon t$ and $\\mathbf{X} = \\epsilon \\mathbf{x}$. We can formally substitute $\\partial_t \\longrightarrow \\partial_t + \\epsilon\\partial_T$ and $\\partial_{\\mathbf{x}} \\longrightarrow \\partial_{x}+\\epsilon \\nabla$, where $\\nabla$ is the gradient with respect to the slow variable. The dispersion relation Eq. (\\ref{dispersion}) becomes\n$$ [i\\omega + \\epsilon \\partial_T - \\Omega(\\mathbf{k}-i\\epsilon\\nabla, \\epsilon^2|\\psi|^2)]\\psi = 0. $$\nSince $\\epsilon$ is considered small, we can expand the equation in power series around $\\epsilon=0$, writing\n$$ i(\\partial_T + \\mathbf{v}_g \\cdot \\nabla)\\psi + \\epsilon[\\nabla \\cdot (D\\nabla\\psi) + \\gamma|\\psi|^2\\psi]=0 $$\nwhere $ \\mathbf{v}_g=\\nabla\\mathbf{k} \\omega $ is the group velocity, and $D$ the half Hessian matrix of $\\omega$. Furthermore, by scaling the spatial coordinate $\\mathbf{\\zeta} = \\mathbf{X} - T\\mathbf{v}_g$, and $\\tau = \\epsilon T$, we obtain\n$$ i\\partial_\\tau +\\nabla \\cdot (D\\nabla\\psi) + \\gamma |\\psi|^2 \\psi = 0 $$\nthat is exactly the NLSE in a generic medium. In isotropic media, $ \\nabla \\cdot (D\\nabla) = \\nabla^2 $ .\n","permalink":"http://lorenzifrancesco.github.io/post/mathematics/canonical/","summary":"Nonlinear Schrödinger equations appears in numerous physical setups, like nonlinear optics, condensed matter physics and plasma physics. In all of these scenarios, it describes the dynamics of wave envelopes in the presence of dispersion and weak nonlinearity. A natural question is to understand if it is possible to write the equation regardless of the physical details, starting from a purely mathematical assumptions on the evolution of the fields. This is illuminating from the mathematical point of view, besides being an useful exercise.","title":"Canonical nonlinear dynamics is described by Nonlinear Schrödinger equation"}]